import '@toast-ui/editor/dist/toastui-editor.css';
import 'prismjs/themes/prism.css';
import '@toast-ui/editor-plugin-code-syntax-highlight/dist/toastui-editor-plugin-code-syntax-highlight.css';
import Editor from '@toast-ui/editor';
import '@toast-ui/editor/dist/i18n/zh-cn';
import codeSyntaxHighlight from '@toast-ui/editor-plugin-code-syntax-highlight';
import Prism from 'prismjs';
import "./prismjs";
import "./viewer.css";


window.initeditor = function (postid, editor) {
    let mdDiv = document.querySelector('#md');
    if (!mdDiv) {
        return;
    }
    let mdEditor = document.querySelector('#md-editor');
    let saveEl = document.querySelector('#md-autosave');
    let dzDiv = document.querySelector('.edt');
    if (editor !== 'md') {
        mdDiv.style.display = 'none';
    } else {
        dzDiv.style.setProperty('display', 'none', 'important');
    }
    let html = mdEditor.innerText;
    let origin = html;
    mdEditor.innerText = '';
    if (localStorage['md-autosave-' + postid]) {
        html = localStorage['md-autosave-' + postid];
    }

    function emojiBtn() {
        const button = document.createElement('button');
        button.className = 'toastui-editor-toolbar-icons last';
        button.style.backgroundImage = 'none';
        button.style.margin = '0';
        button.innerHTML = `<i>üòä</i>`;
        button.type = "button";
        return button;
    }

    function helpBtn() {
        const button = document.createElement('button');
        button.className = 'toastui-editor-toolbar-icons last';
        button.style.backgroundImage = 'none';
        button.style.margin = '0';
        button.innerHTML = `<i>‚ùì</i>`;
        button.type = "button";
        button.onclick = () => {
            window.open("https://bbs.tampermonkey.net.cn/thread-3311-1-1.html", "_blank");
        }
        return button;
    }

    const emoji = showEmoji();

    const md = new Editor({
        el: mdEditor,
        initialValue: html,
        height: '500px',
        initialEditType: 'markdown',
        previewStyle: 'vertical',
        toolbarItems: [['heading', 'bold', 'italic', 'strike', {
            el: emojiBtn(),
            command: 'emoji',
            tooltip: 'Ë°®ÊÉÖÂåÖ',
            popup: {
                body: emoji.body(),
                className: 'toastui-editor-popup-add-image',
            },

        }],
            ['hr', 'quote'],
            ['ul', 'ol', 'task', 'indent', 'outdent'],
            ['table', 'image', 'link'],
            ['code', 'codeblock'], [{
                el: helpBtn(),
                command: 'help',
                tooltip: 'Â∏ÆÂä©',
            }]],
        hooks: {
            addImageBlobHook: async (blob, callback) => {
                // Âà§Êñ≠ÂõæÁâáÂ§ßÂ∞è
                let maxSize = imgUpload.settings.file_size_limit * 1024;
                if (blob.size > maxSize) {
                    showDialog("ÂõæÁâáÂ§ßÂ∞è‰∏çËÉΩË∂ÖËøá" +
                        (imgUpload.settings.file_size_limit / 1024).toFixed(2) + "MB",
                        'notice', null, null, 0, null, null, null, null, sdCloseTime
                    );
                    return false;
                }
                const uploadedImageURL = await uploadImage(blob);

                callback(uploadedImageURL, blob.name);
                return false;
            },
        },
        plugins: [
            [codeSyntaxHighlight, {highlighter: Prism}],
        ],
        autofocus: false,
        language: 'zh-CN',
    });
    emoji.setMd(md);
    document.querySelector("#recover-text").onclick = () => {
        md.setMarkdown(origin);
        return false;
    }
    setInterval(() => {
        localStorage['md-autosave-' + postid] = md.getMarkdown();
        saveEl.innerHTML = "Â∑≤Ëá™Âä®‰øùÂ≠ò " + new Date().toLocaleTimeString();
    }, 10000);
    document.querySelector('#switch-editor').onclick = function () {
        if (editor === 'md') {
            this.innerHTML = '‰ΩøÁî®ÁãÇÁÇ´ÈÖ∑ÁàÜÂêäÁÇ∏Â§©ÁöÑmarkdownÁºñËæëÂô®';
            editor = 'dz';
            mdDiv.style.display = 'none';
            dzDiv.style.display = 'block';
        } else {
            this.innerHTML = '‰ΩøÁî®ÈªòËÆ§ÁºñËæëÂô®';
            editor = 'md';
            dzDiv.style.setProperty('display', 'none', 'important');
            mdDiv.style.display = 'block';
        }
        return false;
    }
    document.querySelector('#postform').addEventListener("submit", function () {
        localStorage.removeItem('md-autosave-' + postid);
        return true;
    });
    // hook getEditorContents ÊñπÊ≥ï
    let getEditorContents = window.getEditorContents;
    window.getEditorContents = function () {
        if (editor === 'md') {
            return "[md]" + md.getMarkdown() + "[/md]";
        }
        return getEditorContents();
    }

    let html2bbcode = window.html2bbcode;
    window.html2bbcode = function (str) {
        if (editor === 'md') {
            return str;
        }
        return html2bbcode(str);
    }
}

function emojiList() {
    return {
        "‰∫∫Áâ©": [
            "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "üòÇ", "ü§£", "üòá", "üòâ", "üòä", "üôÇ", "üôÉ", "üòã", "üòå", "üòç", "ü•∞", "üòò", "üòó", "üòô", "üòö", "ü•≤", "ü§™", "üòú", "üòù", "üòõ", "ü§ë", "üòé", "ü§ì", "ü•∏", "üßê", "ü§†", "ü•≥", "ü§°", "üòè", "üò∂", "üòê", "ü´§", "üòë", "üòí", "üôÑ", "ü§®", "ü§î", "ü§´", "ü§≠", "ü´¢", "ü´°", "ü§ó", "ü´£", "ü§•", "üò≥", "üòû", "üòü", "üò§", "üò†", "üò°", "ü§¨", "üòî", "üòï", "üôÅ", "üò¨", "ü•∫", "üò£", "üòñ", "üò´", "üò©", "ü•±", "üò™", "üòÆ‚Äçüí®", "üòÆ", "üò±", "üò®", "üò∞", "üò•", "üòì", "üòØ", "üò¶", "üòß", "ü•π", "üò¢", "üò≠", "ü§§", "ü§©", "üòµ", "üòµ‚Äçüí´", "ü•¥", "üò≤", "ü§Ø", "ü´†", "ü§ê", "üò∑", "ü§ï", "ü§í", "ü§Æ", "ü§¢", "ü§ß", "ü•µ", "ü•∂",
        ],
        "Âä®Áâ©": [
            "üê∂", "üê±", "üê≠", "üêπ", "üê∞", "üêª", "üß∏", "üêº", "üêª‚Äç‚ùÑÔ∏è", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üêΩ", "üê∏", "üêµ", "üôà", "üôâ", "üôä", "üêí", "ü¶ç", "ü¶ß", "üêî", "üêß", "üê¶", "üê§", "üê£", "üê•", "üê∫", "ü¶ä", "ü¶ù", "üêó", "üê¥", "ü¶ì", "ü¶í", "ü¶å", "ü¶ò", "ü¶•", "ü¶¶", "ü¶´", "ü¶Ñ", "üêù", "üêõ", "ü¶ã", "üêå", "ü™≤", "üêû", "üêú", "ü¶ó", "ü™≥", "üï∑", "üï∏", "ü¶Ç", "ü¶ü", "ü™∞", "ü™±", "ü¶†", "üê¢", "üêç", "ü¶é", "üêô", "ü¶ë", "ü¶û", "ü¶Ä", "ü¶ê", "ü¶™", "üê†", "üêü", "üê°", "üê¨", "ü¶à", "ü¶≠", "üê≥", "üêã", "üêä", "üêÜ", "üêÖ", "üêÉ", "üêÇ", "üêÑ", "ü¶¨", "üê™", "üê´", "ü¶ô", "üêò", "ü¶è", "ü¶õ", "ü¶£", "üêê", "üêè", "üêë", "üêé", "üêñ", "ü¶á", "üêì", "ü¶É", "üïä", "ü¶Ö", "ü¶Ü", "ü¶¢", "ü¶â", "ü¶©", "ü¶ö", "ü¶ú", "ü¶§", "ü™∂", "üêï", "ü¶Æ", "üêï‚Äçü¶∫", "üê©", "üêà", "üêà‚Äç‚¨õ", "üêá", "üêÄ", "üêÅ", "üêø", "ü¶®", "ü¶°", "ü¶î", "üêæ", "üêâ", "üê≤", "ü¶ï", "ü¶ñ", "üåµ", "üéÑ", "üå≤", "üå≥", "üå¥", "ü™¥", "üå±", "üåø", "‚òò", "üçÄ", "üéç", "üéã", "üçÉ", "üçÇ", "üçÅ", "üåæ", "ü™∫", "ü™π", "üå∫", "üåª", "üåπ", "ü•Ä", "üå∑", "üåº", "üå∏", "ü™∑", "üíê", "üçÑ", "üêö", "ü™∏", "üåé", "üåç", "üåè", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåí", "üåì", "üåî", "üåô", "üåö", "üåù", "üåõ", "üåú", "‚≠ê", "üåü", "üí´", "‚ú®", "‚òÑ", "ü™ê", "üåû", "‚òÄ", "üå§", "‚õÖ", "üå•", "üå¶", "‚òÅ", "üåß", "‚õà", "üå©", "‚ö°", "üî•", "üí•", "‚ùÑ", "üå®", "‚òÉ", "‚õÑ", "üå¨", "üí®", "üå™", "üå´", "üåà", "‚òî", "üíß", "üí¶", "üåä"
        ],
        "È£üÁâ©": [
            "üçè", "üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", "üçà", "üçí", "ü´ê", "üçë", "ü•≠", "üçç", "ü••", "ü•ù", "üçÖ", "ü•ë", "ü´í", "üçÜ", "üå∂", "ü´ë", "ü•í", "ü•¨", "ü•¶", "üßÑ", "üßÖ", "üåΩ", "ü•ï", "ü•ó", "ü•î", "üç†", "üå∞", "ü•ú", "ü´ò", "üçØ", "üçû", "ü•ê", "ü•ñ", "ü´ì", "ü•®", "ü•Ø", "ü•û", "üßá", "üßÄ", "üçó", "üçñ", "ü•©", "üç§", "ü•ö", "üç≥", "ü•ì", "üçî", "üçü", "üå≠", "üçï", "üçù", "ü•™", "üåÆ", "üåØ", "ü´î", "ü•ô", "üßÜ", "üçú", "ü•ò", "üç≤", "ü´ï", "ü•´", "ü´ô", "üßÇ", "üßà", "üç•", "üç£", "üç±", "üçõ", "üçô", "üçö", "üçò", "ü•ü", "üç¢", "üç°", "üçß", "üç®", "üç¶", "üç∞", "üéÇ", "üßÅ", "ü•ß", "üçÆ", "üç≠", "üç¨", "üç´", "üçø", "üç©", "üç™", "ü•†", "ü•Æ", "‚òï", "üçµ", "ü´ñ", "ü•£", "üçº", "ü•§", "üßã", "üßÉ", "üßâ", "ü•õ", "ü´ó", "üç∫", "üçª", "üç∑", "ü•Ç", "ü•É", "üç∏", "üçπ", "üçæ", "üç∂", "üßä", "ü•Ñ", "üç¥", "üçΩ", "ü•¢", "ü•°",
        ]
    };
}

// Ë°®ÊÉÖÂåÖÊ°ÜÊû∂
function showEmoji() {
    const ret = {
        md: null,
        setMd: (md) => {
            ret.md = md;
        }
    };
    const div = document.createElement('div');
    const tabs = document.createElement('div');
    tabs.className = 'toastui-editor-tabs';
    const tab1 = document.createElement('div');
    const tab2 = document.createElement('div');
    const tab3 = document.createElement('div');
    tab1.className = 'tab-item active';
    tab1.innerHTML = 'emoji';

    tab2.className = 'tab-item'
    tab2.innerHTML = 'Ëá™ÂÆö‰πâ';

    tab3.className = 'tab-item';
    tab3.innerHTML = 'ÊúÄËøë';
    tabs.append(tab1, tab2, tab3);

    const tabDiv1 = document.createElement('div');
    const tabDiv2 = document.createElement('div');
    const tabDiv3 = document.createElement('div');
    tab1.onclick = () => {
        tab1.className = 'tab-item active';
        tab2.className = 'tab-item';
        tab3.className = 'tab-item';
        tabDiv1.style.display = 'block';
        tabDiv2.style.display = 'none';
        tabDiv3.style.display = 'none';
    }
    tab2.onclick = () => {
        tab1.className = 'tab-item';
        tab2.className = 'tab-item active';
        tab3.className = 'tab-item';
        tabDiv1.style.display = 'none';
        tabDiv2.style.display = 'block';
        tabDiv3.style.display = 'none';
    }
    tab3.onclick = () => {
        tab1.className = 'tab-item';
        tab2.className = 'tab-item';
        tab3.className = 'tab-item active';
        tabDiv1.style.display = 'none';
        tabDiv2.style.display = 'none';
        tabDiv3.style.display = 'block';
    }
    const list = emojiList()
    for (let key in list) {
        list[key].forEach(emoji => {
            tabDiv1.append(createEmoji(emoji));
        })
    }
    loadCustom(tabDiv2);
    loadRecent(tabDiv3);
    div.append(tabs, tabDiv1, tabDiv2, tabDiv3);

    function loadCustom(div) {
        const del = function (e) {
            const ok = confirm('Á°ÆÂÆöÂà†Èô§ËØ•Ë°®ÊÉÖÂêóÔºü');
            if (!ok) {
                return;
            }
            const el = e.target.parentElement.firstChild;
            fetch('/plugin.php?id=codfrm_markdown:emoji&op=del', {
                method: "POST",
                body: 'url=' + encodeURIComponent(el.getAttribute('src')),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            e.target.parentElement.remove();
        }
        fetch('/plugin.php?id=codfrm_markdown:emoji&op=custom').then(resp => resp.json()).then(data => {
            data.data.forEach(src => {
                div.append(createEmoji(src.url, true, del));
            })
            const add = document.createElement('div');
            add.className = 'emoji-img';
            add.style.color = '#9c9c9c';
            add.style.textAlign = 'center';
            add.style.padding = '4px';
            add.innerHTML = '<span style="font-size: 48px;">+</span>';
            add.onclick = () => {
                if (div.childElementCount > 50) {
                    alert('ÊúÄÂ§öÂè™ËÉΩÊ∑ªÂä†50‰∏™Ë°®ÊÉÖ');
                    return;
                }
                const img = prompt('ËØ∑ËæìÂÖ•ÂõæÁâáÂú∞ÂùÄ');
                if (img) {
                    fetch('/plugin.php?id=codfrm_markdown:emoji&op=add', {
                        method: 'POST',
                        body: 'url=' + encodeURIComponent(img),
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        }
                    })
                    div.firstChild.before(createEmoji(img, true, del));
                }
            }
            div.append(add);
        });
    }

    function loadRecent(div) {
        fetch('/plugin.php?id=codfrm_markdown:emoji&op=recent').then(resp => resp.json()).then(data => {
            data.data.forEach(src => {
                div.append(createEmoji('/data/attachment/forum/' + src.url, true));
            })
        });
    }

    function createEmoji(emoji, img, del) {
        const div = document.createElement('div');
        if (img) {
            div.className = 'emoji-img';
            div.innerHTML = '<img src="' + emoji + '"/>';
            if (del) {
                let btn = document.createElement('button');
                btn.className = 'emoji-del';
                btn.innerHTML = 'X';
                btn.onclick = del;
                btn.type = 'button';
                div.append(btn);
            } else {
                div.className += ' un-del';
            }
            div.onclick = function (e) {
                const img = e.currentTarget.firstChild;
                ret.md.insertText("![](" + img.src + ")");
            }
        } else {
            div.className = 'emoji';
            div.innerHTML = emoji;
            div.onclick = function (e) {
                ret.md.insertText(emoji);
            }
        }
        return div;
    }

    ret.body = () => div;
    return ret;
}

function uploadImage(blob) {
    return new Promise((resolve) => {
        let xhr = new XMLHttpRequest();
        // imgUpload.settings
        xhr.open('POST', "/misc.php?mod=swfupload&action=swfupload&operation=upload&fid=2&simple=2")
        let form = new FormData();
        form.append("uid", discuz_uid);
        form.append("hash", document.querySelector("[name='hash']").value);
        form.append("type", "image")
        form.append("filetype", blob.type);
        form.append("size", blob.size);
        form.append("Filedata", blob);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if (xhr.status !== 200) {
                    return alert("ÂõæÁâá‰∏ä‰º†ÈîôËØØ");
                }
                let resps = xhr.responseText.split("|");
                let atta = document.createElement('input');
                atta.name = 'attachnew[' + resps[3] + '][description]';
                atta.style.display = 'none';
                document.querySelector('#postbox').append(atta);
                resolve(
                    "data/attachment/forum/" + resps[5]
                );
            }
        }
        xhr.send(form)
    });
}